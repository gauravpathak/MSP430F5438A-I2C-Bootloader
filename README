									README FILE FOR MSP430F5510 BOOTSTRAP LOADER
									
Steps for Using BSL firmware:
1) Import this project in CCS
	>>	Goto Project --> Import Existing CCS Project
	>>	Browse the location where CUSTOM_BSL is located and click Finish
2)	Build the project and press F11 for loading the firmware in MSP430
3)	BSL project cannot be debugged using MSP-FET430UIF
4)	Similarly import the Demo Application in CCS
5)	Build the Demo Application and press F11 to load it in MSP430
6)	Run the Application by pressing F8

Note: The Firmware upgrade process using BSL can be performed only once, if you wish to perform upgrade procedure again then you have to change 
	  the data stored in EEPROM. 
							
FILES IN THE DISTRIBUTION

README............................................... The file you are currently reading
BSL430_Command_Interpreter.c ........................ BSL Source code of the controller firmware
BSL430_Low_Level_Init.asm ........................... Low level initialisation routine for BSL
lnk_msp430f5438a_bsl.cmd ............................ Customised Linker Script File specially for compiling BSL
System_i2c.c ........................................ I2C Routines for EEPROM 24xx512 series
System_i2c.h ........................................ Header File for I2C Routines

-------------------------------------------------------------------------------------------------------------------------------------------
Note that the boot loader code is indepemdent of the application code, for the boot laoder to work the following code must be integrated 
oin the application following is the memory map of both the boot loader(BSL) and that of application
BSL Start address 0x1000
Application start address 0x8000
------------------------------------------------------------------------------------------------------------------------------------------- 
									DEMO APPLICATION FOR DEMONSTRATION OF FIRMWARE UPGRADE USING BSL
									
This project demonstrates the funtionality of MSP430 BSL.
The program inside main.c reads the EEPROMs Page0 offset0 and stores it in an array named eeprom_data and verifies whether firmware 
update is available or not by checking the contents of 0th byte, if contents of 0th byte is 0x04 (defined using Macro as MSP430_FIRMWARE_AVAILABLE)
then it means firmware update is available for MSP430 and this code redirects MSP430 to BSL which is stored at location 0x1000.
If Firmware update is not available then program does not redirect to BSL and execution of current program continues.

NOTE:
The following lines inside main.c should not be altered and must be included in all main firmware application code

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer

    Device_clockSetup();
    Device_portSetup();
    Device_ledReset();

    System_i2c_UCB0_init();
    System_i2c_UCB0_isPresent(0x50);

    System_i2c_UCB0_read_16bSubAddr(0x50,0x0000,eeprom_data,128);	//Read the METADATA from EEPROM page0 offset0 and store it in my_data array

/*The following lines are important in order to check new firmware availability and perform an update. Byte 0 will tell us about update
 * availability. If contents of byte 0 is other than 0x04 then MSP430 firmware update is not available.
 * The three lines inside IF statement along with IF condition must be included in all main firmware application
 * */
    if(eeprom_data[0] == MSP430_FIRMWARE_AVAILABLE)						//Check if firmware update is available or not; if available then jump to BSL otherwise continue
    {											//with execution of current program
    	SYSBSLC &= ~(SYSBSLPE);					//Clear BSL Protect Enable Bit to unlock BSL; refer slau208
		__disable_interrupt();    				//Disable interrupt before jumping to BSL
		((void(*)(void))0x1000)();				//Calling Default address location of BSL
    }
    else
    {
		while(1)
		{
			/*Your application code goes here*/
		}
    }
}
